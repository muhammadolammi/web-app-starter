// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
first_name, last_name,
email, password, access_token  )
VALUES ( $1, $2, $3, $4, $5)
RETURNING id, first_name, last_name, email, access_token, password
`

type CreateUserParams struct {
	FirstName   string
	LastName    string
	Email       string
	Password    string
	AccessToken sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.AccessToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccessToken,
		&i.Password,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, access_token, password FROM users
WHERE id=$1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccessToken,
		&i.Password,
	)
	return i, err
}

const getUserWithEmail = `-- name: GetUserWithEmail :one
SELECT id, first_name, last_name, email, access_token, password FROM users
WHERE email=$1
`

func (q *Queries) GetUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccessToken,
		&i.Password,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, first_name, last_name, email, access_token, password FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.AccessToken,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccessToken = `-- name: UpdateAccessToken :exec
UPDATE users
SET access_token = $1
WHERE email = $2
RETURNING id, first_name, last_name, email, access_token, password
`

type UpdateAccessTokenParams struct {
	AccessToken sql.NullString
	Email       string
}

func (q *Queries) UpdateAccessToken(ctx context.Context, arg UpdateAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateAccessToken, arg.AccessToken, arg.Email)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $1
WHERE email = $2
RETURNING id, first_name, last_name, email, access_token, password
`

type UpdatePasswordParams struct {
	Password string
	Email    string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.Email)
	return err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE email = $1
)
`

func (q *Queries) UserExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
